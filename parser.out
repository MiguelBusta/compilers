Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> assignment
Rule 1     assignment -> VARIABLE EQUAL expression
Rule 2     assignment -> VARIABLE LBRACKET expression RBRACKET EQUAL expression
Rule 3     assignment -> list_access EQUAL expression
Rule 4     assignment -> VARIABLE EQUAL flow
Rule 5     flow -> VARIABLE CONNECT flow_functions
Rule 6     flow_functions -> flow_function_call CONNECT flow_functions
Rule 7     flow_functions -> flow_function_call
Rule 8     flow_function_call -> VARIABLE LPAREN params RPAREN
Rule 9     assignment -> expression
Rule 10    expression -> term
Rule 11    expression -> string
Rule 12    expression -> list_access
Rule 13    string -> STRING
Rule 14    expression -> expression PLUS term
Rule 15    expression -> expression MINUS term
Rule 16    term -> exponent
Rule 17    term -> term TIMES exponent
Rule 18    term -> term DIV exponent
Rule 19    exponent -> factor
Rule 20    exponent -> factor EXP factor
Rule 21    factor -> NUMBER
Rule 22    factor -> VARIABLE
Rule 23    factor -> LPAREN expression RPAREN
Rule 24    factor -> function_call
Rule 25    function_call -> VARIABLE LPAREN RPAREN
Rule 26    function_call -> VARIABLE LPAREN params RPAREN
Rule 27    params -> params COMMA expression
Rule 28    params -> expression
Rule 29    factor -> LBRACKET elements RBRACKET
Rule 30    elements -> elements COMMA expression
Rule 31    elements -> expression
Rule 32    list_access -> VARIABLE LBRACKET expression RBRACKET
Rule 33    list_access -> VARIABLE LBRACKET expression COLON expression RBRACKET
Rule 34    list_access -> VARIABLE LBRACKET COLON expression RBRACKET
Rule 35    list_access -> VARIABLE LBRACKET expression COLON RBRACKET
Rule 36    list_access -> VARIABLE LBRACKET COLON RBRACKET
Rule 37    list_access -> list_access LBRACKET expression RBRACKET

Terminals, with rules where they appear

COLON                : 33 34 35 36
COMMA                : 27 30
CONNECT              : 5 6
DIV                  : 18
EQUAL                : 1 2 3 4
EXP                  : 20
LBRACKET             : 2 29 32 33 34 35 36 37
LPAREN               : 8 23 25 26
MINUS                : 15
NUMBER               : 21
PLUS                 : 14
RBRACKET             : 2 29 32 33 34 35 36 37
RPAREN               : 8 23 25 26
STRING               : 13
TIMES                : 17
VARIABLE             : 1 2 4 5 8 22 25 26 32 33 34 35 36
error                : 

Nonterminals, with rules where they appear

assignment           : 0
elements             : 29 30
exponent             : 16 17 18
expression           : 1 2 2 3 9 14 15 23 27 28 30 31 32 33 33 34 35 37
factor               : 19 20 20
flow                 : 4
flow_function_call   : 6 7
flow_functions       : 5 6
function_call        : 24
list_access          : 3 12 37
params               : 8 26 27
string               : 11
term                 : 10 14 15 17 18

Parsing method: LALR

state 0

    (0) S' -> . assignment
    (1) assignment -> . VARIABLE EQUAL expression
    (2) assignment -> . VARIABLE LBRACKET expression RBRACKET EQUAL expression
    (3) assignment -> . list_access EQUAL expression
    (4) assignment -> . VARIABLE EQUAL flow
    (9) assignment -> . expression
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 2
    STRING          shift and go to state 9
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    assignment                     shift and go to state 1
    expression                     shift and go to state 3
    list_access                    shift and go to state 5
    term                           shift and go to state 6
    string                         shift and go to state 7
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 1

    (0) S' -> assignment .



state 2

    (1) assignment -> VARIABLE . EQUAL expression
    (2) assignment -> VARIABLE . LBRACKET expression RBRACKET EQUAL expression
    (4) assignment -> VARIABLE . EQUAL flow
    (32) list_access -> VARIABLE . LBRACKET expression RBRACKET
    (33) list_access -> VARIABLE . LBRACKET expression COLON expression RBRACKET
    (34) list_access -> VARIABLE . LBRACKET COLON expression RBRACKET
    (35) list_access -> VARIABLE . LBRACKET expression COLON RBRACKET
    (36) list_access -> VARIABLE . LBRACKET COLON RBRACKET
    (22) factor -> VARIABLE .
    (25) function_call -> VARIABLE . LPAREN RPAREN
    (26) function_call -> VARIABLE . LPAREN params RPAREN

    EQUAL           shift and go to state 14
    LBRACKET        shift and go to state 15
    EXP             reduce using rule 22 (factor -> VARIABLE .)
    TIMES           reduce using rule 22 (factor -> VARIABLE .)
    DIV             reduce using rule 22 (factor -> VARIABLE .)
    PLUS            reduce using rule 22 (factor -> VARIABLE .)
    MINUS           reduce using rule 22 (factor -> VARIABLE .)
    $end            reduce using rule 22 (factor -> VARIABLE .)
    LPAREN          shift and go to state 16


state 3

    (9) assignment -> expression .
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    $end            reduce using rule 9 (assignment -> expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 4

    (29) factor -> LBRACKET . elements RBRACKET
    (30) elements -> . elements COMMA expression
    (31) elements -> . expression
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    elements                       shift and go to state 19
    expression                     shift and go to state 20
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 5

    (3) assignment -> list_access . EQUAL expression
    (37) list_access -> list_access . LBRACKET expression RBRACKET
    (12) expression -> list_access .

    EQUAL           shift and go to state 23
    LBRACKET        shift and go to state 24
    PLUS            reduce using rule 12 (expression -> list_access .)
    MINUS           reduce using rule 12 (expression -> list_access .)
    $end            reduce using rule 12 (expression -> list_access .)


state 6

    (10) expression -> term .
    (17) term -> term . TIMES exponent
    (18) term -> term . DIV exponent

    PLUS            reduce using rule 10 (expression -> term .)
    MINUS           reduce using rule 10 (expression -> term .)
    $end            reduce using rule 10 (expression -> term .)
    RBRACKET        reduce using rule 10 (expression -> term .)
    COMMA           reduce using rule 10 (expression -> term .)
    RPAREN          reduce using rule 10 (expression -> term .)
    COLON           reduce using rule 10 (expression -> term .)
    TIMES           shift and go to state 25
    DIV             shift and go to state 26


state 7

    (11) expression -> string .

    PLUS            reduce using rule 11 (expression -> string .)
    MINUS           reduce using rule 11 (expression -> string .)
    $end            reduce using rule 11 (expression -> string .)
    RBRACKET        reduce using rule 11 (expression -> string .)
    COMMA           reduce using rule 11 (expression -> string .)
    RPAREN          reduce using rule 11 (expression -> string .)
    COLON           reduce using rule 11 (expression -> string .)


state 8

    (16) term -> exponent .

    TIMES           reduce using rule 16 (term -> exponent .)
    DIV             reduce using rule 16 (term -> exponent .)
    PLUS            reduce using rule 16 (term -> exponent .)
    MINUS           reduce using rule 16 (term -> exponent .)
    $end            reduce using rule 16 (term -> exponent .)
    RBRACKET        reduce using rule 16 (term -> exponent .)
    COMMA           reduce using rule 16 (term -> exponent .)
    RPAREN          reduce using rule 16 (term -> exponent .)
    COLON           reduce using rule 16 (term -> exponent .)


state 9

    (13) string -> STRING .

    PLUS            reduce using rule 13 (string -> STRING .)
    MINUS           reduce using rule 13 (string -> STRING .)
    $end            reduce using rule 13 (string -> STRING .)
    RBRACKET        reduce using rule 13 (string -> STRING .)
    COMMA           reduce using rule 13 (string -> STRING .)
    RPAREN          reduce using rule 13 (string -> STRING .)
    COLON           reduce using rule 13 (string -> STRING .)


state 10

    (19) exponent -> factor .
    (20) exponent -> factor . EXP factor

    TIMES           reduce using rule 19 (exponent -> factor .)
    DIV             reduce using rule 19 (exponent -> factor .)
    PLUS            reduce using rule 19 (exponent -> factor .)
    MINUS           reduce using rule 19 (exponent -> factor .)
    $end            reduce using rule 19 (exponent -> factor .)
    RBRACKET        reduce using rule 19 (exponent -> factor .)
    COMMA           reduce using rule 19 (exponent -> factor .)
    RPAREN          reduce using rule 19 (exponent -> factor .)
    COLON           reduce using rule 19 (exponent -> factor .)
    EXP             shift and go to state 27


state 11

    (21) factor -> NUMBER .

    EXP             reduce using rule 21 (factor -> NUMBER .)
    TIMES           reduce using rule 21 (factor -> NUMBER .)
    DIV             reduce using rule 21 (factor -> NUMBER .)
    PLUS            reduce using rule 21 (factor -> NUMBER .)
    MINUS           reduce using rule 21 (factor -> NUMBER .)
    $end            reduce using rule 21 (factor -> NUMBER .)
    RBRACKET        reduce using rule 21 (factor -> NUMBER .)
    COMMA           reduce using rule 21 (factor -> NUMBER .)
    RPAREN          reduce using rule 21 (factor -> NUMBER .)
    COLON           reduce using rule 21 (factor -> NUMBER .)


state 12

    (23) factor -> LPAREN . expression RPAREN
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    expression                     shift and go to state 28
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 13

    (24) factor -> function_call .

    EXP             reduce using rule 24 (factor -> function_call .)
    TIMES           reduce using rule 24 (factor -> function_call .)
    DIV             reduce using rule 24 (factor -> function_call .)
    PLUS            reduce using rule 24 (factor -> function_call .)
    MINUS           reduce using rule 24 (factor -> function_call .)
    $end            reduce using rule 24 (factor -> function_call .)
    RBRACKET        reduce using rule 24 (factor -> function_call .)
    COMMA           reduce using rule 24 (factor -> function_call .)
    RPAREN          reduce using rule 24 (factor -> function_call .)
    COLON           reduce using rule 24 (factor -> function_call .)


state 14

    (1) assignment -> VARIABLE EQUAL . expression
    (4) assignment -> VARIABLE EQUAL . flow
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (5) flow -> . VARIABLE CONNECT flow_functions
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 29
    STRING          shift and go to state 9
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    expression                     shift and go to state 30
    flow                           shift and go to state 31
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 15

    (2) assignment -> VARIABLE LBRACKET . expression RBRACKET EQUAL expression
    (32) list_access -> VARIABLE LBRACKET . expression RBRACKET
    (33) list_access -> VARIABLE LBRACKET . expression COLON expression RBRACKET
    (34) list_access -> VARIABLE LBRACKET . COLON expression RBRACKET
    (35) list_access -> VARIABLE LBRACKET . expression COLON RBRACKET
    (36) list_access -> VARIABLE LBRACKET . COLON RBRACKET
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    COLON           shift and go to state 33
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    expression                     shift and go to state 32
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 16

    (25) function_call -> VARIABLE LPAREN . RPAREN
    (26) function_call -> VARIABLE LPAREN . params RPAREN
    (27) params -> . params COMMA expression
    (28) params -> . expression
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    RPAREN          shift and go to state 34
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    params                         shift and go to state 35
    expression                     shift and go to state 36
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 17

    (14) expression -> expression PLUS . term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 11
    VARIABLE        shift and go to state 38
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    term                           shift and go to state 37
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 18

    (15) expression -> expression MINUS . term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 11
    VARIABLE        shift and go to state 38
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    term                           shift and go to state 39
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 19

    (29) factor -> LBRACKET elements . RBRACKET
    (30) elements -> elements . COMMA expression

    RBRACKET        shift and go to state 40
    COMMA           shift and go to state 41


state 20

    (31) elements -> expression .
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RBRACKET        reduce using rule 31 (elements -> expression .)
    COMMA           reduce using rule 31 (elements -> expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 21

    (12) expression -> list_access .
    (37) list_access -> list_access . LBRACKET expression RBRACKET

    PLUS            reduce using rule 12 (expression -> list_access .)
    MINUS           reduce using rule 12 (expression -> list_access .)
    RBRACKET        reduce using rule 12 (expression -> list_access .)
    COMMA           reduce using rule 12 (expression -> list_access .)
    RPAREN          reduce using rule 12 (expression -> list_access .)
    $end            reduce using rule 12 (expression -> list_access .)
    COLON           reduce using rule 12 (expression -> list_access .)
    LBRACKET        shift and go to state 24


state 22

    (32) list_access -> VARIABLE . LBRACKET expression RBRACKET
    (33) list_access -> VARIABLE . LBRACKET expression COLON expression RBRACKET
    (34) list_access -> VARIABLE . LBRACKET COLON expression RBRACKET
    (35) list_access -> VARIABLE . LBRACKET expression COLON RBRACKET
    (36) list_access -> VARIABLE . LBRACKET COLON RBRACKET
    (22) factor -> VARIABLE .
    (25) function_call -> VARIABLE . LPAREN RPAREN
    (26) function_call -> VARIABLE . LPAREN params RPAREN

    LBRACKET        shift and go to state 42
    EXP             reduce using rule 22 (factor -> VARIABLE .)
    TIMES           reduce using rule 22 (factor -> VARIABLE .)
    DIV             reduce using rule 22 (factor -> VARIABLE .)
    PLUS            reduce using rule 22 (factor -> VARIABLE .)
    MINUS           reduce using rule 22 (factor -> VARIABLE .)
    RBRACKET        reduce using rule 22 (factor -> VARIABLE .)
    COMMA           reduce using rule 22 (factor -> VARIABLE .)
    RPAREN          reduce using rule 22 (factor -> VARIABLE .)
    COLON           reduce using rule 22 (factor -> VARIABLE .)
    $end            reduce using rule 22 (factor -> VARIABLE .)
    LPAREN          shift and go to state 16


state 23

    (3) assignment -> list_access EQUAL . expression
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    list_access                    shift and go to state 21
    expression                     shift and go to state 43
    term                           shift and go to state 6
    string                         shift and go to state 7
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 24

    (37) list_access -> list_access LBRACKET . expression RBRACKET
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    list_access                    shift and go to state 21
    expression                     shift and go to state 44
    term                           shift and go to state 6
    string                         shift and go to state 7
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 25

    (17) term -> term TIMES . exponent
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 11
    VARIABLE        shift and go to state 38
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    exponent                       shift and go to state 45
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 26

    (18) term -> term DIV . exponent
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 11
    VARIABLE        shift and go to state 38
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    exponent                       shift and go to state 46
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 27

    (20) exponent -> factor EXP . factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 11
    VARIABLE        shift and go to state 38
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    factor                         shift and go to state 47
    function_call                  shift and go to state 13

state 28

    (23) factor -> LPAREN expression . RPAREN
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RPAREN          shift and go to state 48
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 29

    (5) flow -> VARIABLE . CONNECT flow_functions
    (32) list_access -> VARIABLE . LBRACKET expression RBRACKET
    (33) list_access -> VARIABLE . LBRACKET expression COLON expression RBRACKET
    (34) list_access -> VARIABLE . LBRACKET COLON expression RBRACKET
    (35) list_access -> VARIABLE . LBRACKET expression COLON RBRACKET
    (36) list_access -> VARIABLE . LBRACKET COLON RBRACKET
    (22) factor -> VARIABLE .
    (25) function_call -> VARIABLE . LPAREN RPAREN
    (26) function_call -> VARIABLE . LPAREN params RPAREN

    CONNECT         shift and go to state 49
    LBRACKET        shift and go to state 42
    EXP             reduce using rule 22 (factor -> VARIABLE .)
    TIMES           reduce using rule 22 (factor -> VARIABLE .)
    DIV             reduce using rule 22 (factor -> VARIABLE .)
    PLUS            reduce using rule 22 (factor -> VARIABLE .)
    MINUS           reduce using rule 22 (factor -> VARIABLE .)
    $end            reduce using rule 22 (factor -> VARIABLE .)
    LPAREN          shift and go to state 16


state 30

    (1) assignment -> VARIABLE EQUAL expression .
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    $end            reduce using rule 1 (assignment -> VARIABLE EQUAL expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 31

    (4) assignment -> VARIABLE EQUAL flow .

    $end            reduce using rule 4 (assignment -> VARIABLE EQUAL flow .)


state 32

    (2) assignment -> VARIABLE LBRACKET expression . RBRACKET EQUAL expression
    (32) list_access -> VARIABLE LBRACKET expression . RBRACKET
    (33) list_access -> VARIABLE LBRACKET expression . COLON expression RBRACKET
    (35) list_access -> VARIABLE LBRACKET expression . COLON RBRACKET
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RBRACKET        shift and go to state 50
    COLON           shift and go to state 51
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 33

    (34) list_access -> VARIABLE LBRACKET COLON . expression RBRACKET
    (36) list_access -> VARIABLE LBRACKET COLON . RBRACKET
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    RBRACKET        shift and go to state 53
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    expression                     shift and go to state 52
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 34

    (25) function_call -> VARIABLE LPAREN RPAREN .

    EXP             reduce using rule 25 (function_call -> VARIABLE LPAREN RPAREN .)
    TIMES           reduce using rule 25 (function_call -> VARIABLE LPAREN RPAREN .)
    DIV             reduce using rule 25 (function_call -> VARIABLE LPAREN RPAREN .)
    PLUS            reduce using rule 25 (function_call -> VARIABLE LPAREN RPAREN .)
    MINUS           reduce using rule 25 (function_call -> VARIABLE LPAREN RPAREN .)
    $end            reduce using rule 25 (function_call -> VARIABLE LPAREN RPAREN .)
    RBRACKET        reduce using rule 25 (function_call -> VARIABLE LPAREN RPAREN .)
    COMMA           reduce using rule 25 (function_call -> VARIABLE LPAREN RPAREN .)
    RPAREN          reduce using rule 25 (function_call -> VARIABLE LPAREN RPAREN .)
    COLON           reduce using rule 25 (function_call -> VARIABLE LPAREN RPAREN .)


state 35

    (26) function_call -> VARIABLE LPAREN params . RPAREN
    (27) params -> params . COMMA expression

    RPAREN          shift and go to state 54
    COMMA           shift and go to state 55


state 36

    (28) params -> expression .
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RPAREN          reduce using rule 28 (params -> expression .)
    COMMA           reduce using rule 28 (params -> expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 37

    (14) expression -> expression PLUS term .
    (17) term -> term . TIMES exponent
    (18) term -> term . DIV exponent

    PLUS            reduce using rule 14 (expression -> expression PLUS term .)
    MINUS           reduce using rule 14 (expression -> expression PLUS term .)
    $end            reduce using rule 14 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 14 (expression -> expression PLUS term .)
    COMMA           reduce using rule 14 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 14 (expression -> expression PLUS term .)
    COLON           reduce using rule 14 (expression -> expression PLUS term .)
    TIMES           shift and go to state 25
    DIV             shift and go to state 26


state 38

    (22) factor -> VARIABLE .
    (25) function_call -> VARIABLE . LPAREN RPAREN
    (26) function_call -> VARIABLE . LPAREN params RPAREN

    EXP             reduce using rule 22 (factor -> VARIABLE .)
    TIMES           reduce using rule 22 (factor -> VARIABLE .)
    DIV             reduce using rule 22 (factor -> VARIABLE .)
    PLUS            reduce using rule 22 (factor -> VARIABLE .)
    MINUS           reduce using rule 22 (factor -> VARIABLE .)
    $end            reduce using rule 22 (factor -> VARIABLE .)
    RBRACKET        reduce using rule 22 (factor -> VARIABLE .)
    COMMA           reduce using rule 22 (factor -> VARIABLE .)
    RPAREN          reduce using rule 22 (factor -> VARIABLE .)
    COLON           reduce using rule 22 (factor -> VARIABLE .)
    LPAREN          shift and go to state 16


state 39

    (15) expression -> expression MINUS term .
    (17) term -> term . TIMES exponent
    (18) term -> term . DIV exponent

    PLUS            reduce using rule 15 (expression -> expression MINUS term .)
    MINUS           reduce using rule 15 (expression -> expression MINUS term .)
    $end            reduce using rule 15 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 15 (expression -> expression MINUS term .)
    COMMA           reduce using rule 15 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 15 (expression -> expression MINUS term .)
    COLON           reduce using rule 15 (expression -> expression MINUS term .)
    TIMES           shift and go to state 25
    DIV             shift and go to state 26


state 40

    (29) factor -> LBRACKET elements RBRACKET .

    EXP             reduce using rule 29 (factor -> LBRACKET elements RBRACKET .)
    TIMES           reduce using rule 29 (factor -> LBRACKET elements RBRACKET .)
    DIV             reduce using rule 29 (factor -> LBRACKET elements RBRACKET .)
    PLUS            reduce using rule 29 (factor -> LBRACKET elements RBRACKET .)
    MINUS           reduce using rule 29 (factor -> LBRACKET elements RBRACKET .)
    $end            reduce using rule 29 (factor -> LBRACKET elements RBRACKET .)
    RBRACKET        reduce using rule 29 (factor -> LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 29 (factor -> LBRACKET elements RBRACKET .)
    RPAREN          reduce using rule 29 (factor -> LBRACKET elements RBRACKET .)
    COLON           reduce using rule 29 (factor -> LBRACKET elements RBRACKET .)


state 41

    (30) elements -> elements COMMA . expression
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    expression                     shift and go to state 56
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 42

    (32) list_access -> VARIABLE LBRACKET . expression RBRACKET
    (33) list_access -> VARIABLE LBRACKET . expression COLON expression RBRACKET
    (34) list_access -> VARIABLE LBRACKET . COLON expression RBRACKET
    (35) list_access -> VARIABLE LBRACKET . expression COLON RBRACKET
    (36) list_access -> VARIABLE LBRACKET . COLON RBRACKET
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    COLON           shift and go to state 33
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    expression                     shift and go to state 57
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 43

    (3) assignment -> list_access EQUAL expression .
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    $end            reduce using rule 3 (assignment -> list_access EQUAL expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 44

    (37) list_access -> list_access LBRACKET expression . RBRACKET
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RBRACKET        shift and go to state 58
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 45

    (17) term -> term TIMES exponent .

    TIMES           reduce using rule 17 (term -> term TIMES exponent .)
    DIV             reduce using rule 17 (term -> term TIMES exponent .)
    PLUS            reduce using rule 17 (term -> term TIMES exponent .)
    MINUS           reduce using rule 17 (term -> term TIMES exponent .)
    $end            reduce using rule 17 (term -> term TIMES exponent .)
    RBRACKET        reduce using rule 17 (term -> term TIMES exponent .)
    COMMA           reduce using rule 17 (term -> term TIMES exponent .)
    RPAREN          reduce using rule 17 (term -> term TIMES exponent .)
    COLON           reduce using rule 17 (term -> term TIMES exponent .)


state 46

    (18) term -> term DIV exponent .

    TIMES           reduce using rule 18 (term -> term DIV exponent .)
    DIV             reduce using rule 18 (term -> term DIV exponent .)
    PLUS            reduce using rule 18 (term -> term DIV exponent .)
    MINUS           reduce using rule 18 (term -> term DIV exponent .)
    $end            reduce using rule 18 (term -> term DIV exponent .)
    RBRACKET        reduce using rule 18 (term -> term DIV exponent .)
    COMMA           reduce using rule 18 (term -> term DIV exponent .)
    RPAREN          reduce using rule 18 (term -> term DIV exponent .)
    COLON           reduce using rule 18 (term -> term DIV exponent .)


state 47

    (20) exponent -> factor EXP factor .

    TIMES           reduce using rule 20 (exponent -> factor EXP factor .)
    DIV             reduce using rule 20 (exponent -> factor EXP factor .)
    PLUS            reduce using rule 20 (exponent -> factor EXP factor .)
    MINUS           reduce using rule 20 (exponent -> factor EXP factor .)
    $end            reduce using rule 20 (exponent -> factor EXP factor .)
    RBRACKET        reduce using rule 20 (exponent -> factor EXP factor .)
    COMMA           reduce using rule 20 (exponent -> factor EXP factor .)
    RPAREN          reduce using rule 20 (exponent -> factor EXP factor .)
    COLON           reduce using rule 20 (exponent -> factor EXP factor .)


state 48

    (23) factor -> LPAREN expression RPAREN .

    EXP             reduce using rule 23 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 23 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 23 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 23 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 23 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 23 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 23 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 23 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 23 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 23 (factor -> LPAREN expression RPAREN .)


state 49

    (5) flow -> VARIABLE CONNECT . flow_functions
    (6) flow_functions -> . flow_function_call CONNECT flow_functions
    (7) flow_functions -> . flow_function_call
    (8) flow_function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 59

    flow_functions                 shift and go to state 60
    flow_function_call             shift and go to state 61

state 50

    (2) assignment -> VARIABLE LBRACKET expression RBRACKET . EQUAL expression
    (32) list_access -> VARIABLE LBRACKET expression RBRACKET .

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 62
    LBRACKET        reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)
    $end            reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)

  ! EQUAL           [ reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .) ]


state 51

    (33) list_access -> VARIABLE LBRACKET expression COLON . expression RBRACKET
    (35) list_access -> VARIABLE LBRACKET expression COLON . RBRACKET
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    RBRACKET        shift and go to state 64
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    expression                     shift and go to state 63
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 52

    (34) list_access -> VARIABLE LBRACKET COLON expression . RBRACKET
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RBRACKET        shift and go to state 65
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 53

    (36) list_access -> VARIABLE LBRACKET COLON RBRACKET .

    EQUAL           reduce using rule 36 (list_access -> VARIABLE LBRACKET COLON RBRACKET .)
    LBRACKET        reduce using rule 36 (list_access -> VARIABLE LBRACKET COLON RBRACKET .)
    PLUS            reduce using rule 36 (list_access -> VARIABLE LBRACKET COLON RBRACKET .)
    MINUS           reduce using rule 36 (list_access -> VARIABLE LBRACKET COLON RBRACKET .)
    $end            reduce using rule 36 (list_access -> VARIABLE LBRACKET COLON RBRACKET .)
    RBRACKET        reduce using rule 36 (list_access -> VARIABLE LBRACKET COLON RBRACKET .)
    COMMA           reduce using rule 36 (list_access -> VARIABLE LBRACKET COLON RBRACKET .)
    RPAREN          reduce using rule 36 (list_access -> VARIABLE LBRACKET COLON RBRACKET .)
    COLON           reduce using rule 36 (list_access -> VARIABLE LBRACKET COLON RBRACKET .)


state 54

    (26) function_call -> VARIABLE LPAREN params RPAREN .

    EXP             reduce using rule 26 (function_call -> VARIABLE LPAREN params RPAREN .)
    TIMES           reduce using rule 26 (function_call -> VARIABLE LPAREN params RPAREN .)
    DIV             reduce using rule 26 (function_call -> VARIABLE LPAREN params RPAREN .)
    PLUS            reduce using rule 26 (function_call -> VARIABLE LPAREN params RPAREN .)
    MINUS           reduce using rule 26 (function_call -> VARIABLE LPAREN params RPAREN .)
    $end            reduce using rule 26 (function_call -> VARIABLE LPAREN params RPAREN .)
    RBRACKET        reduce using rule 26 (function_call -> VARIABLE LPAREN params RPAREN .)
    COMMA           reduce using rule 26 (function_call -> VARIABLE LPAREN params RPAREN .)
    RPAREN          reduce using rule 26 (function_call -> VARIABLE LPAREN params RPAREN .)
    COLON           reduce using rule 26 (function_call -> VARIABLE LPAREN params RPAREN .)


state 55

    (27) params -> params COMMA . expression
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    expression                     shift and go to state 66
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 56

    (30) elements -> elements COMMA expression .
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RBRACKET        reduce using rule 30 (elements -> elements COMMA expression .)
    COMMA           reduce using rule 30 (elements -> elements COMMA expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 57

    (32) list_access -> VARIABLE LBRACKET expression . RBRACKET
    (33) list_access -> VARIABLE LBRACKET expression . COLON expression RBRACKET
    (35) list_access -> VARIABLE LBRACKET expression . COLON RBRACKET
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RBRACKET        shift and go to state 67
    COLON           shift and go to state 51
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 58

    (37) list_access -> list_access LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 37 (list_access -> list_access LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 37 (list_access -> list_access LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 37 (list_access -> list_access LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 37 (list_access -> list_access LBRACKET expression RBRACKET .)
    $end            reduce using rule 37 (list_access -> list_access LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 37 (list_access -> list_access LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 37 (list_access -> list_access LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 37 (list_access -> list_access LBRACKET expression RBRACKET .)
    COLON           reduce using rule 37 (list_access -> list_access LBRACKET expression RBRACKET .)


state 59

    (8) flow_function_call -> VARIABLE . LPAREN params RPAREN

    LPAREN          shift and go to state 68


state 60

    (5) flow -> VARIABLE CONNECT flow_functions .

    $end            reduce using rule 5 (flow -> VARIABLE CONNECT flow_functions .)


state 61

    (6) flow_functions -> flow_function_call . CONNECT flow_functions
    (7) flow_functions -> flow_function_call .

    CONNECT         shift and go to state 69
    $end            reduce using rule 7 (flow_functions -> flow_function_call .)


state 62

    (2) assignment -> VARIABLE LBRACKET expression RBRACKET EQUAL . expression
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    expression                     shift and go to state 70
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 63

    (33) list_access -> VARIABLE LBRACKET expression COLON expression . RBRACKET
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RBRACKET        shift and go to state 71
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 64

    (35) list_access -> VARIABLE LBRACKET expression COLON RBRACKET .

    EQUAL           reduce using rule 35 (list_access -> VARIABLE LBRACKET expression COLON RBRACKET .)
    LBRACKET        reduce using rule 35 (list_access -> VARIABLE LBRACKET expression COLON RBRACKET .)
    PLUS            reduce using rule 35 (list_access -> VARIABLE LBRACKET expression COLON RBRACKET .)
    MINUS           reduce using rule 35 (list_access -> VARIABLE LBRACKET expression COLON RBRACKET .)
    $end            reduce using rule 35 (list_access -> VARIABLE LBRACKET expression COLON RBRACKET .)
    RBRACKET        reduce using rule 35 (list_access -> VARIABLE LBRACKET expression COLON RBRACKET .)
    COMMA           reduce using rule 35 (list_access -> VARIABLE LBRACKET expression COLON RBRACKET .)
    RPAREN          reduce using rule 35 (list_access -> VARIABLE LBRACKET expression COLON RBRACKET .)
    COLON           reduce using rule 35 (list_access -> VARIABLE LBRACKET expression COLON RBRACKET .)


state 65

    (34) list_access -> VARIABLE LBRACKET COLON expression RBRACKET .

    EQUAL           reduce using rule 34 (list_access -> VARIABLE LBRACKET COLON expression RBRACKET .)
    LBRACKET        reduce using rule 34 (list_access -> VARIABLE LBRACKET COLON expression RBRACKET .)
    PLUS            reduce using rule 34 (list_access -> VARIABLE LBRACKET COLON expression RBRACKET .)
    MINUS           reduce using rule 34 (list_access -> VARIABLE LBRACKET COLON expression RBRACKET .)
    $end            reduce using rule 34 (list_access -> VARIABLE LBRACKET COLON expression RBRACKET .)
    RBRACKET        reduce using rule 34 (list_access -> VARIABLE LBRACKET COLON expression RBRACKET .)
    COMMA           reduce using rule 34 (list_access -> VARIABLE LBRACKET COLON expression RBRACKET .)
    RPAREN          reduce using rule 34 (list_access -> VARIABLE LBRACKET COLON expression RBRACKET .)
    COLON           reduce using rule 34 (list_access -> VARIABLE LBRACKET COLON expression RBRACKET .)


state 66

    (27) params -> params COMMA expression .
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    RPAREN          reduce using rule 27 (params -> params COMMA expression .)
    COMMA           reduce using rule 27 (params -> params COMMA expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 67

    (32) list_access -> VARIABLE LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)
    $end            reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)
    COLON           reduce using rule 32 (list_access -> VARIABLE LBRACKET expression RBRACKET .)


state 68

    (8) flow_function_call -> VARIABLE LPAREN . params RPAREN
    (27) params -> . params COMMA expression
    (28) params -> . expression
    (10) expression -> . term
    (11) expression -> . string
    (12) expression -> . list_access
    (14) expression -> . expression PLUS term
    (15) expression -> . expression MINUS term
    (16) term -> . exponent
    (17) term -> . term TIMES exponent
    (18) term -> . term DIV exponent
    (13) string -> . STRING
    (32) list_access -> . VARIABLE LBRACKET expression RBRACKET
    (33) list_access -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (34) list_access -> . VARIABLE LBRACKET COLON expression RBRACKET
    (35) list_access -> . VARIABLE LBRACKET expression COLON RBRACKET
    (36) list_access -> . VARIABLE LBRACKET COLON RBRACKET
    (37) list_access -> . list_access LBRACKET expression RBRACKET
    (19) exponent -> . factor
    (20) exponent -> . factor EXP factor
    (21) factor -> . NUMBER
    (22) factor -> . VARIABLE
    (23) factor -> . LPAREN expression RPAREN
    (24) factor -> . function_call
    (29) factor -> . LBRACKET elements RBRACKET
    (25) function_call -> . VARIABLE LPAREN RPAREN
    (26) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 9
    VARIABLE        shift and go to state 22
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12
    LBRACKET        shift and go to state 4

    params                         shift and go to state 72
    expression                     shift and go to state 36
    term                           shift and go to state 6
    string                         shift and go to state 7
    list_access                    shift and go to state 21
    exponent                       shift and go to state 8
    factor                         shift and go to state 10
    function_call                  shift and go to state 13

state 69

    (6) flow_functions -> flow_function_call CONNECT . flow_functions
    (6) flow_functions -> . flow_function_call CONNECT flow_functions
    (7) flow_functions -> . flow_function_call
    (8) flow_function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 59

    flow_function_call             shift and go to state 61
    flow_functions                 shift and go to state 73

state 70

    (2) assignment -> VARIABLE LBRACKET expression RBRACKET EQUAL expression .
    (14) expression -> expression . PLUS term
    (15) expression -> expression . MINUS term

    $end            reduce using rule 2 (assignment -> VARIABLE LBRACKET expression RBRACKET EQUAL expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18


state 71

    (33) list_access -> VARIABLE LBRACKET expression COLON expression RBRACKET .

    EQUAL           reduce using rule 33 (list_access -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    LBRACKET        reduce using rule 33 (list_access -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 33 (list_access -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 33 (list_access -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    $end            reduce using rule 33 (list_access -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 33 (list_access -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 33 (list_access -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 33 (list_access -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 33 (list_access -> VARIABLE LBRACKET expression COLON expression RBRACKET .)


state 72

    (8) flow_function_call -> VARIABLE LPAREN params . RPAREN
    (27) params -> params . COMMA expression

    RPAREN          shift and go to state 74
    COMMA           shift and go to state 55


state 73

    (6) flow_functions -> flow_function_call CONNECT flow_functions .

    $end            reduce using rule 6 (flow_functions -> flow_function_call CONNECT flow_functions .)


state 74

    (8) flow_function_call -> VARIABLE LPAREN params RPAREN .

    CONNECT         reduce using rule 8 (flow_function_call -> VARIABLE LPAREN params RPAREN .)
    $end            reduce using rule 8 (flow_function_call -> VARIABLE LPAREN params RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 50 resolved as shift
